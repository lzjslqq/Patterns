主要优点
　　（1）提供了对开闭原则的完美支持，用户可以在不修改原有系统的基础上选择具体算法或行为，也可以灵活地增加新的算法或行为。

　　（2）避免了多重的if-else条件选择语句，利于系统的维护。

　　（3）提供了一种算法的复用机制，不同的环境类可以方便地复用这些策略类。

主要缺点
　　（1）客户端需要知道所有的策略类，并自行决定使用哪一个策略 => 只适用于客户端了解所有策略算法的情况。

　　（2）将造成系统产生很多的具体策略类，任何细小的变化都将导致系统要增加一个具体策略类 => 类的个数也许会超出预期。

　　（3）无法在客户端同时使用多个策略类 => 客户端每次只能使用一个策略类。

应用场景
　　（1）如果一个系统要动态地在几种算法之间选择其中一种 => 那就快用策略模式吧骚年！

　　（2）如果有难以维护的多重if-else条件选择语句是为了实现对象的行为 => 那就快用策略模式吧骚年！

　　（3）不希望客户知道复杂的与算法有关的数据结构，可以将其封装到策略中 => 提高算法的保密性和安全性！