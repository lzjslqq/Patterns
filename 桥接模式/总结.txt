主要优点

　　（1）分离抽象接口及其实现部分 -> 桥接模式使用“对象间的关联关系”解耦了抽象和实现之间固有的绑定关系，使得抽象和实现可以沿着各自的维度变化

　　（2）取代多层继承方案 -> 极大地减少了子类的个数

　　（3）提高了系统可扩展性 -> 在两个变化维度中任意扩展一个维度，都不需要修改原有系统，符合开闭原则

主要缺点

　　（1）增加了系统的理解和设计难度 -> 需要开发者在一开始就对抽象层进行设计与编程

　　（2）要求正确识别出系统中两个独立变化的维度 -> 如何正确地识别需要一定的经验积累

应用场景

　　（1）一个类存在两个（或者多个）独立变化的维度，而且这两个（或者多个）维度都需要独立进行扩展。

　　（2）不希望使用继承或因为多层继承而导致系统中类的个数急剧增加。

　　（3）一个系统需要在抽象类和具体类之间增加更多的灵活性，避免在两个层次之间建立静态继承关系，通过桥接可以使它们在抽象层建立一个关联关系。