主要优点

　　模板方法中可以通过子类来覆盖父类的基本方法，不同的子类可以提供基本方法的不同实现，更换和增加新的子类很方便，符合单一职责和开闭原则。

主要缺点

　　需要为每一个基本方法的不同实现一个子类，如果父类中可变的基本方法太多，将会导致类的个数增加，系统更加庞大，设计也会更加抽象。

应用场景

　　（1）对一些复杂的算法进行分割，将其算法中固定不变的部分设计为模板方法和父类具体方法，而一些可以改变的细节由其子类来实现。
　　（2）需要通过子类来决定父类算法中某个步骤是否执行，实现子类对父类的反向控制。