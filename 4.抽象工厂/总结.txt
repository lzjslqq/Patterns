
抽象工厂模式主要优点

　　（1）隔离了具体类的生成，使得客户并不需要知道什么被创建。因为这种隔离，因此更换一个具体工厂就变得相对容易。

　　（2）当一个产品族中的多个对象被设计称一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。

　　（3）增加新的产品族很方便，无需修改已有系统，符合开闭原则。

抽象工厂模式主要缺点

　　增加新的产品等级结构很麻烦，增加新的产品等级结构很麻烦，增加新的产品等级结构很麻烦！！！（重要的事情说三遍）
因为需要对原有系统进行较大的修改，甚至需要修改抽象层代码，这必然会带来较大的不便，在这个角度，它违背了开闭（对扩展开放，对修改封闭）原则。

　　想想，如果我们需要为单选按钮（RadioButton）提供不同皮肤的风格化显示，会发现无论选择哪种皮肤，单选按钮都显得“格格不入”。

抽象工厂模式应用场景

　　（1）用户无须关心对象的创建过程，需要将对象的创建和使用解耦 -> 这是所有工厂模式的使用前提

　　（2）系统中有多余一个的产品族，而每次都只使用其中的某一种产品族。 -> 可以通过配置文件等方式来使得用户可以动态地改变产品族，也可以很方便地增加新的产品族

　　（3）产品等级结构稳定！设计完成之后，不会向系统中增加新的产品等级结构或删除已有产品等级结构。 -> 并不太符合开闭原则