主要优点

　　（1）客户端不需要知道产品内部的组成细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。

　　（2）具体建造者相对独立，增加新的具体建造者无需修改原有类库的代码，系统扩展比较方便，符合开闭原则。

　　（3）可以更加精细地控制产品的创建过程 -> 将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。

主要缺点

　　（1）对于所创建的产品有一定限制：一般这些产品都具有一些较多的共同点，其组成部分相似。如果差异性很大，那么则不适合使用建造者模式。

　　（2）如果产品的内部结构复杂多变，可能会需要定义很多具体构建者来实现这些变化，会导致系统变得庞大，增加系统的理解难度和运行成本。

应用场景

    （1）需要生成的产品对象由复杂的内部结构，这些产品对象通常包含多个成员变量。

　　（2）需要生成的产品对象的属性相互依赖，需要指定其生成顺序。

　　（3）隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。